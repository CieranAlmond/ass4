# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  
# Orchestrate or schedule a set of jobs
      
jobs:
  lint:
  #  docker:
  #    - image: python:3.9.0-alpine
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            make install
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: run lint
          command: |
            source venv/bin/activate
            make lint
            
  smoke_test:
    docker : 
      - image :  alpine:latest
    steps:
      - run:
          name: Smoke Tests
          command: |
            if curl -s --head "http://localhost:8080" 
                then
            echo "It worked!"
            else
              echo "It failed"
            fi
            
  config-image:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build, test and push docker image
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker build -t kibnov/container .
            docker-compose up -d
            sleep 10
            docker ps
            export url="http://localhost:8000"
            export response=$(curl -s $url)
            echo "This is response $response"
            if [[ $response == *"Rolling Deployment V2"* ]]; then              
              docker stop app_web_1
            else              
              docker stop app_web_1
            fi
            docker push kibnov/container
            
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
    #  eks_installation:
     # - run:
      #    command: |
            
          
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string

    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/udacity-capstone
          
  test-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
          name: Test cluster


workflows:
    my-weather:
      jobs:
        - lint
        - config-image
       # - eks_installation
        - aws-eks/create-cluster:
            cluster-name: udacity-capstone-weather
            requires:
              - config-image
        - test-cluster:
            cluster-name: udacity-capstone-weather
            requires:
              - aws-eks/create-cluster
        - create-deployment:
           cluster-name:  udacity-capstone-weather
           requires:
              - test-cluster
        - test-deployment:
            cluster-name:  udacity-capstone-weather
            requires:
              - create-deployment              
        - aws-eks/update-container-image:
            cluster-name: udacity-capstone-weather
            container-image-updates: 'udacity-capstone=kibnov/container'
            get-rollout-status: true
            record: true
            requires:
             - test-deployment
            resource-name:  deployment/udacity-capstone 