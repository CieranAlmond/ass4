version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

executors:
  python:
    docker:
      - image: circleci/python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli

jobs:
  lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - attach_workspace:
          at: .

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
  build-test-push:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
            
          name: Build, test and push docker image
          command: |
            docker login --username ${kibnov} --password-stdin ${Mycatissobad}
            docker build -t kibnov/diss -t kibnov/diss:${CIRCLE_WORKFLOW_ID:0:7} .
            docker run -d --rm --name flaskapp -p 8000:8080 kibnov/diss:${CIRCLE_WORKFLOW_ID:0:7}
            sleep 5
            docker container ls
            export url="http://localhost:8000"
            export response=$(curl -s $url)
            echo "This is response $response"
            if [[ $response == *"Moustafa"* ]]; then
              docker stop flaskapp
            else
              docker stop flaskapp
              exit 1
            fi
            echo "CIRCLE CI WORKFLOW ID ${CIRCLE_WORKFLOW_ID:0:7}"
            docker push kibnov/diss:${CIRCLE_WORKFLOW_ID:0:7}
            docker push kibnov/diss:latest
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - run:
          name: Set var
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            export clusters=$(aws eks list-clusters)
            if [[ $clusters == *"<< parameters.cluster-name >>"* ]]; then
              circleci-agent step halt
            fi
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string

    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/aws-capstone

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
workflows:
  capstone:
    jobs:
      - lint
      - build-test-push:
          requires:
            - lint
      - create-cluster:
          cluster-name:  devops-capstone-project
          requires:
            - build-test-push

      - create-deployment:
          cluster-name:  devops-capstone-project
          requires:
            - create-cluster

      - aws-eks/update-container-image:
          cluster-name: devops-capstone-project
          container-image-updates: 'aws-capstone=kibnov/diss:${CIRCLE_WORKFLOW_ID:0:7}'
          get-rollout-status: true
          record: true
          requires:
            - create-deployment
          resource-name:  deployment/aws-capstone

      - test-cluster:
          cluster-name:  devops-capstone-project
          requires:
            - aws-eks/update-container-image
      - aws-eks/delete-cluster:
         cluster-name:  devops-capstone-project
         requires:
           - test-cluster